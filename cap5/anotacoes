📦 O que é uma Tabela Hash?
Uma tabela hash (ou dicionário, em Python) é uma estrutura de dados que mapeia
chaves para valores, permitindo buscas, inserções e deleções muito rápidas — geralmente
em tempo constante O(1).


🧮 Funções Hash:
A função hash transforma uma chave (como uma string) em um índice de um array.

- Boa função hash → distribui uniformemente as chaves.
- Evita colisões (duas chaves diferentes caindo no mesmo índice).


🔍 Usando Tabelas Hash para Pesquisas:
Tabelas hash permitem pesquisar um valor associado a uma chave de forma muito rápida.

preco = {}
preco["banana"] = 1.2

print(preco["banana"])  

Busca por chave é extremamente eficiente.


🚫 Evitando Entradas Duplicadas:
Uma aplicação comum das tabelas hash é verificar duplicatas rapidamente.

votaram = dict() ou votaram = {}

votaram = {}

def verifica_voto(nome):
    if votaram.get(nome):
        print("Chame a polícia!")
    else:
        votaram[nome] = True
        print("Deixe votar")

- O método get() retorna None se a chave não existir.
- Muito útil em sistemas que precisam garantir unicidade (ex: login, votos, cadastros).


🧠 Por que usar Tabelas Hash?

| Operação | Complexidade Média |
| -------- | ------------------ |
| Inserção | O(1)               |
| Busca    | O(1)               |
| Deleção  | O(1)               |

Obs: Em casos raros de colisões, o tempo pode crescer, mas boas funções hash minimizam isso.


💾 Usando Tabelas Hash como Cache
Você pode armazenar resultados de cálculos caros para evitar fazer novamente.

📌 Exemplo:

cache = {}

def pega_ágina(url):
  if cache.get(url):
    return cache[url] -> Retorna os dados do cache
  else:
    dados = pega_dados_do_servidor(url)
    cache[url] = dados -> Salva esses dados primeiro no seu cache
    return dados


⚠️ Colisões
Colisão = duas chaves diferentes sendo convertidas para o mesmo índice.

🛠 Soluções comuns:
- Encadeamento: guardar uma lista de itens naquele índice.
- Endereçamento aberto: procurar outro índice livre.


⚙️ Desempenho e Fator de Carga
📌 Fator de carga = número de itens armazenados / tamanho total da tabela.

- Se o fator de carga for muito alto → muitas colisões.
- Ideal: manter abaixo de 0.7 e redimensionar a tabela quando necessário.


✅ Características de uma Boa Função Hash
Uma boa função hash:

- É rápida de calcular.
- Gera distribuições equilibradas (espalha bem os dados).
- Minimiza colisões.


✅ Conclusão:

- Tabelas hash são ferramentas poderosas para armazenar e buscar dados com eficiência.
- Usadas em autenticação, contagem de frequência, detecção de duplicatas e muito mais.
- A chave para eficiência é usar uma boa função hash e evitar colisões.
