üß† O que s√£o Algoritmos Gulosos?
S√£o algoritmos que fazem a melhor escolha poss√≠vel a cada etapa,
sem se preocupar com o resultado final global.

- Escolhem localmente o que parece melhor.
- Nem sempre fornecem a solu√ß√£o perfeita, mas costumam gerar boas aproxima√ß√µes.
- Muito utilizados em problemas dif√≠ceis de resolver exatamente (ex: NP-completos).


üè´ Problema de Cronograma da Sala de Aula:
Objetivo: Agendar o maior n√∫mero poss√≠vel de aulas, sem que seus hor√°rios
se sobreponham.
üü¢ Estrat√©gia gulosa: Sempre escolher a aula que termina mais cedo.

üìå Exemplo:

| Aula | In√≠cio | Fim |
| ---- | ------ | --- |
| A    | 9h     | 10h |
| B    | 9h30   | 11h |
| C    | 10h    | 11h |


üéí Problema da Mochila (Knapsack):
Objetivo: Colocar os itens com o maior valor total poss√≠vel dentro da mochila,
respeitando o limite de peso.
üü¢ Estrat√©gia gulosa: Ordenar os itens por valor por quilo e pegar os melhores
at√© encher a mochila.

üìå Exemplo:

| Item     | Valor | Peso | Valor por kg |
| -------- | ----- | ---- | ------------ |
| Notebook | 3000  | 4kg  | 750          |
| Livro    | 1500  | 3kg  | 500          |
| Viol√£o   | 2000  | 2kg  | 1000         |

- Ordem gulosa: Viol√£o ‚Üí Notebook ‚Üí Livro (at√© atingir o peso m√°ximo).


üåç Problema da Cobertura de Conjuntos (Set Cover):
Objetivo: Escolher o menor n√∫mero poss√≠vel de esta√ß√µes de r√°dio para cobrir
todos os estados.
üü¢ Estrat√©gia gulosa: Sempre escolher a esta√ß√£o que cobre o maior n√∫mero de
estados ainda n√£o cobertos.

üìå Exemplo:

estacoes = {
    'kone': {'id', 'nv', 'ut'},
    'ktwo': {'wa', 'id', 'mt'},
    'kthree': {'or', 'nv', 'ca'},
    'kfour': {'nv', 'ut'},
    'kfive': {'ca', 'az'}
}

estados_necessarios = {'mt', 'wa', 'or', 'id', 'nv', 'ut', 'ca', 'az'}

üìå C√≥digo de solu√ß√£o:

estacoes_finais = set()

while estados_necessarios:
    melhor_estacao = None
    estados_cobertos = set()
    for estacao, estados in estacoes.items():
        cobertos = estados & estados_necessarios
        if len(cobertos) > len(estados_cobertos):
            melhor_estacao = estacao
            estados_cobertos = cobertos
    estados_necessarios -= estados_cobertos
    estacoes_finais.add(melhor_estacao)

print("Esta√ß√µes escolhidas:", estacoes_finais)


üìà Algoritmos de Aproxima√ß√£o:
- S√£o algoritmos que n√£o garantem a solu√ß√£o perfeita, mas produzem uma
solu√ß√£o suficientemente boa, em tempo vi√°vel.
- √öteis para problemas NP-completos, onde encontrar a melhor solu√ß√£o pode
ser invi√°vel.


üìö Conjuntos e Python
Python oferece suporte nativo a conjuntos com a estrutura set():
- Uni√£o: A | B
- Interse√ß√£o: A & B
- Diferen√ßa: A - B

