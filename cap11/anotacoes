🌳 Árvores:
- Estrutura de dados eficiente para buscas, inserções e remoções.
- Árvores binárias de busca (BST) mantêm os dados organizados de forma que
cada nó tenha no máximo dois filhos: um menor e um maior.
- Usadas em bancos de dados, sistemas de arquivos e organização de informações
hierárquicas.


📚 Índices Invertidos:
- Estrutura usada por mecanismos de busca.
- Mapeia palavras-chave para os documentos onde elas aparecem.
- Permite buscas rápidas por termos, como no Google.
- Exemplo: a palavra "algoritmo" pode apontar para os documentos 2, 5 e 9.


🔄 Transformada de Fourier:
- Técnica para converter sinais do domínio do tempo para o domínio da frequência.
- Útil em compressão de áudio e imagem (ex: MP3, JPEG).
- Permite entender os padrões de frequência em sinais complexos.


⚙️ Algoritmos Paralelos e MapReduce:
Algoritmos paralelos: dividem tarefas em partes menores que podem ser executadas
simultaneamente por vários processadores.

MapReduce é um modelo de programação usado em computação distribuída.
- map: aplica uma função a cada item de uma lista.
- reduce: combina os resultados em um único valor.

Exemplo: contar quantas vezes cada palavra aparece em um conjunto enorme de documentos.


🌍 Por que Algoritmos Distribuídos são Úteis?
- Permitem processar grandes volumes de dados de forma eficiente e escalável.
- Utilizados em sistemas como Google, Amazon e Facebook.
- Ajudam a lidar com tarefas que seriam impossíveis de executar em um único computador.


🗺️ Função map e Função reduce:
- map(f, lista): aplica a função f a cada item da lista.
- reduce(f, lista): combina todos os elementos da lista usando a função f.
- São essenciais em frameworks como Hadoop e Spark.


⚡ Filtros Probabilísticos:

🧪 Filtro de Bloom:
- Estrutura de dados compacta usada para testar se um item pertence a um conjunto.
- Usa várias funções hash e uma tabela de bits.
- Pode dizer que um item está no conjunto mesmo se não estiver (falsos positivos),
mas nunca erra ao dizer que um item não está.
- Útil em sistemas que precisam economizar memória, como em caches e filtros de spam.

📏 HyperLogLog:
- Algoritmo para estimar rapidamente o número de elementos distintos em um conjunto
(contagem aproximada).
- Muito mais eficiente que armazenar todos os dados.
- Usado por empresas para medir visitantes únicos, consultas, etc.


🔐 Algoritmos SHA:
- Funções hash criptográficas como SHA-1 ou SHA-256 produzem um resumo (hash) 
fixo a partir de qualquer entrada.
- Pequenas alterações na entrada geram mudanças grandes e imprevisíveis no hash.
- São determinísticas: a mesma entrada sempre gera o mesmo hash.

Muito usadas para:
- Verificar integridade de arquivos.
- Armazenar senhas de forma segura.
- Assinar digitalmente mensagens.


📁 Comparando Arquivos com Hash:
- Para saber se dois arquivos são iguais, pode-se calcular o hash de cada um.
- Se os hashes forem iguais, os arquivos provavelmente são idênticos (embora 
existam casos raríssimos de colisões).
- Isso é muito mais rápido do que comparar todos os bytes dos arquivos.


🔒 Verificação de Senhas com Hash:
- Em vez de armazenar senhas em texto puro (inseguro!), os sistemas armazenam
o hash da senha.
- Quando o usuário digita a senha, o sistema calcula o hash e compara com o 
armazenado.
- Assim, mesmo que o banco de dados seja comprometido, os atacantes não terão
acesso direto às senhas.


🧬 Hash Sensitivo Local:
- Algoritmo que aproxima itens semelhantes agrupando seus hashes.
- Ideal para comparar textos, músicas ou imagens com pequenas variações.
- Exemplo: encontrar imagens quase idênticas em um banco de dados.


🔐 Troca de Chaves de Diffie-Hellman:
- Método criptográfico para dois lados trocarem uma chave secreta sem
enviá-la diretamente.
- Baseado em exponenciação modular.
- Fundamento da criptografia moderna.


📊 Programação Linear:
- Técnica de otimização para problemas com restrições lineares.
Exemplos:
- Maximizar lucros com recursos limitados.
- Minimizar custos respeitando limites de produção.
Problemas são representados por funções objetivo + restrições.


✅ Conclusão:
- O capítulo destaca algoritmos e estruturas essenciais para sistemas eficientes
e escaláveis.
- Árvores, índices invertidos e MapReduce otimizam buscas e processamento de dados
em larga escala.
- Filtros probabilísticos e funções hash garantem desempenho e segurança com baixo custo.
- Técnicas como Fourier, Hash Sensitivo Local e Diffie-Hellman ampliam as aplicações em
compressão, similaridade e criptografia.
- A programação linear mostra como resolver problemas reais com restrições.
- No geral, o conteúdo reforça a importância de algoritmos robustos em contextos 
modernos e distribuídos.
