‚ö° Quicksort
Um dos algoritmos mais famosos que usa DC.

Como funciona:
1. Escolhe-se um piv√¥ da lista.

2. Separa a lista em:
- Elementos menores que o piv√¥.
- Elementos maiores que o piv√¥.

3. Aplica o quicksort recursivamente em cada metade.

4. Junta os resultados.


üß© O que √© "Dividir para Conquistar"?
Dividir para conquistar (Divide and Conquer ‚Äì DC) √© uma t√©cnica onde:

1. O problema √© dividido em subproblemas menores e semelhantes.
2. Resolve-se recursivamente os subproblemas.
3. Junta-se as solu√ß√µes para formar a resposta final.


üîÅ Algoritmo de Euclides:
Resolve o problema de encontrar o MDC (m√°ximo divisor comum) entre dois n√∫meros.
Al√©m disso, esse algoritmo tamb√©m usa o princ√≠pio de dividir para conquistar!


üß† Uma espiada na Programa√ß√£o Funcional:

- Programa√ß√£o funcional se encaixa bem com algoritmos recursivos e divide para conquistar.
- Fun√ß√µes puras: N√£o t√™m efeitos colaterais.
- Imutabilidade: Evita modificar vari√°veis.


üìö Provas por Indu√ß√£o:
Muito usadas para provar se algoritmos recursivos funcionam.

1. Caso-base:
Prova-se que o algoritmo funciona para um caso simples (ex: lista vazia ou de 1 elemento).

2. Caso indutivo:
Assume-se que funciona para um problema menor e mostra que tamb√©m funciona para um maior.


‚öîÔ∏è Merge Sort vs Quicksort:

| Algoritmo  | Tempo m√©dio | Pior caso  | Est√°vel? | Observa√ß√µes                       |
| ---------- | ----------- | ---------- | -------- | --------------------------------- |
| Quicksort  | O(n log n)  | O(n¬≤)      | N√£o      | Mais r√°pido na pr√°tica            |
| Merge Sort | O(n log n)  | O(n log n) | Sim      | Gasta mais mem√≥ria, mas √© est√°vel |


üéØ Caso M√©dio vs Pior Caso:

- Caso m√©dio: Situa√ß√£o comum; por exemplo, quicksort geralmente roda em O(n log n).
- Pior caso: Quando a performance √© a pior poss√≠vel; ex: lista j√° ordenada ‚Üí O(n¬≤) no quicksort.
- Usamos a nota√ß√£o Big O para descrever o pior caso, por seguran√ßa.


‚úÖ Conclus√£o:

- A t√©cnica "dividir para conquistar" √© poderosa e eficiente, usada em algoritmos famosos.
- O quicksort √© um exemplo pr√°tico e r√°pido, mas tem um pior caso ruim.
- O algoritmo de Euclides tamb√©m divide problemas at√© que fiquem triviais.
- Recurs√£o, provas por indu√ß√£o e programa√ß√£o funcional andam juntos nessa abordagem.
- Compreender o caso m√©dio e o pior caso ajuda a escolher o melhor algoritmo na pr√°tica.
